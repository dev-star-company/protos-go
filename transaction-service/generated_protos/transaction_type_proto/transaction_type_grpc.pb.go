// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: transaction-service/protos/transaction_type.proto

package transaction_type_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionTypeService_Create_FullMethodName = "/transaction_type_proto.TransactionTypeService/Create"
	TransactionTypeService_Get_FullMethodName    = "/transaction_type_proto.TransactionTypeService/Get"
	TransactionTypeService_Update_FullMethodName = "/transaction_type_proto.TransactionTypeService/Update"
	TransactionTypeService_Delete_FullMethodName = "/transaction_type_proto.TransactionTypeService/Delete"
	TransactionTypeService_List_FullMethodName   = "/transaction_type_proto.TransactionTypeService/List"
)

// TransactionTypeServiceClient is the client API for TransactionTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionTypeServiceClient interface {
	Create(ctx context.Context, in *CreateTransactionTypeRequest, opts ...grpc.CallOption) (*CreateTransactionTypeResponse, error)
	Get(ctx context.Context, in *GetTransactionTypeRequest, opts ...grpc.CallOption) (*GetTransactionTypeResponse, error)
	Update(ctx context.Context, in *UpdateTransactionTypeRequest, opts ...grpc.CallOption) (*UpdateTransactionTypeResponse, error)
	Delete(ctx context.Context, in *DeleteTransactionTypeRequest, opts ...grpc.CallOption) (*DeleteTransactionTypeResponse, error)
	List(ctx context.Context, in *ListTransactionTypeRequest, opts ...grpc.CallOption) (*ListTransactionTypeResponse, error)
}

type transactionTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionTypeServiceClient(cc grpc.ClientConnInterface) TransactionTypeServiceClient {
	return &transactionTypeServiceClient{cc}
}

func (c *transactionTypeServiceClient) Create(ctx context.Context, in *CreateTransactionTypeRequest, opts ...grpc.CallOption) (*CreateTransactionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionTypeResponse)
	err := c.cc.Invoke(ctx, TransactionTypeService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionTypeServiceClient) Get(ctx context.Context, in *GetTransactionTypeRequest, opts ...grpc.CallOption) (*GetTransactionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionTypeResponse)
	err := c.cc.Invoke(ctx, TransactionTypeService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionTypeServiceClient) Update(ctx context.Context, in *UpdateTransactionTypeRequest, opts ...grpc.CallOption) (*UpdateTransactionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTransactionTypeResponse)
	err := c.cc.Invoke(ctx, TransactionTypeService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionTypeServiceClient) Delete(ctx context.Context, in *DeleteTransactionTypeRequest, opts ...grpc.CallOption) (*DeleteTransactionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTransactionTypeResponse)
	err := c.cc.Invoke(ctx, TransactionTypeService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionTypeServiceClient) List(ctx context.Context, in *ListTransactionTypeRequest, opts ...grpc.CallOption) (*ListTransactionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionTypeResponse)
	err := c.cc.Invoke(ctx, TransactionTypeService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionTypeServiceServer is the server API for TransactionTypeService service.
// All implementations must embed UnimplementedTransactionTypeServiceServer
// for forward compatibility.
type TransactionTypeServiceServer interface {
	Create(context.Context, *CreateTransactionTypeRequest) (*CreateTransactionTypeResponse, error)
	Get(context.Context, *GetTransactionTypeRequest) (*GetTransactionTypeResponse, error)
	Update(context.Context, *UpdateTransactionTypeRequest) (*UpdateTransactionTypeResponse, error)
	Delete(context.Context, *DeleteTransactionTypeRequest) (*DeleteTransactionTypeResponse, error)
	List(context.Context, *ListTransactionTypeRequest) (*ListTransactionTypeResponse, error)
	mustEmbedUnimplementedTransactionTypeServiceServer()
}

// UnimplementedTransactionTypeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionTypeServiceServer struct{}

func (UnimplementedTransactionTypeServiceServer) Create(context.Context, *CreateTransactionTypeRequest) (*CreateTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTransactionTypeServiceServer) Get(context.Context, *GetTransactionTypeRequest) (*GetTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTransactionTypeServiceServer) Update(context.Context, *UpdateTransactionTypeRequest) (*UpdateTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTransactionTypeServiceServer) Delete(context.Context, *DeleteTransactionTypeRequest) (*DeleteTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTransactionTypeServiceServer) List(context.Context, *ListTransactionTypeRequest) (*ListTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTransactionTypeServiceServer) mustEmbedUnimplementedTransactionTypeServiceServer() {
}
func (UnimplementedTransactionTypeServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionTypeServiceServer will
// result in compilation errors.
type UnsafeTransactionTypeServiceServer interface {
	mustEmbedUnimplementedTransactionTypeServiceServer()
}

func RegisterTransactionTypeServiceServer(s grpc.ServiceRegistrar, srv TransactionTypeServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionTypeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionTypeService_ServiceDesc, srv)
}

func _TransactionTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionTypeServiceServer).Create(ctx, req.(*CreateTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionTypeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionTypeServiceServer).Get(ctx, req.(*GetTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionTypeServiceServer).Update(ctx, req.(*UpdateTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionTypeServiceServer).Delete(ctx, req.(*DeleteTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionTypeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionTypeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionTypeService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionTypeServiceServer).List(ctx, req.(*ListTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionTypeService_ServiceDesc is the grpc.ServiceDesc for TransactionTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction_type_proto.TransactionTypeService",
	HandlerType: (*TransactionTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TransactionTypeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TransactionTypeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TransactionTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TransactionTypeService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TransactionTypeService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction-service/protos/transaction_type.proto",
}
