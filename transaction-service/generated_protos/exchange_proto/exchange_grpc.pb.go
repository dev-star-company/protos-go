// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: transaction-service/protos/exchange.proto

package exchange_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExchangeService_Create_FullMethodName = "/exchange_proto.ExchangeService/Create"
	ExchangeService_Get_FullMethodName    = "/exchange_proto.ExchangeService/Get"
	ExchangeService_Update_FullMethodName = "/exchange_proto.ExchangeService/Update"
	ExchangeService_Delete_FullMethodName = "/exchange_proto.ExchangeService/Delete"
	ExchangeService_List_FullMethodName   = "/exchange_proto.ExchangeService/List"
)

// ExchangeServiceClient is the client API for ExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeServiceClient interface {
	Create(ctx context.Context, in *CreateExchangeRequest, opts ...grpc.CallOption) (*CreateExchangeResponse, error)
	Get(ctx context.Context, in *GetExchangeRequest, opts ...grpc.CallOption) (*GetExchangeResponse, error)
	Update(ctx context.Context, in *UpdateExchangeRequest, opts ...grpc.CallOption) (*UpdateExchangeResponse, error)
	Delete(ctx context.Context, in *DeleteExchangeRequest, opts ...grpc.CallOption) (*DeleteExchangeResponse, error)
	List(ctx context.Context, in *ListExchangeRequest, opts ...grpc.CallOption) (*ListExchangeResponse, error)
}

type exchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeServiceClient(cc grpc.ClientConnInterface) ExchangeServiceClient {
	return &exchangeServiceClient{cc}
}

func (c *exchangeServiceClient) Create(ctx context.Context, in *CreateExchangeRequest, opts ...grpc.CallOption) (*CreateExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExchangeResponse)
	err := c.cc.Invoke(ctx, ExchangeService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) Get(ctx context.Context, in *GetExchangeRequest, opts ...grpc.CallOption) (*GetExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExchangeResponse)
	err := c.cc.Invoke(ctx, ExchangeService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) Update(ctx context.Context, in *UpdateExchangeRequest, opts ...grpc.CallOption) (*UpdateExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExchangeResponse)
	err := c.cc.Invoke(ctx, ExchangeService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) Delete(ctx context.Context, in *DeleteExchangeRequest, opts ...grpc.CallOption) (*DeleteExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExchangeResponse)
	err := c.cc.Invoke(ctx, ExchangeService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) List(ctx context.Context, in *ListExchangeRequest, opts ...grpc.CallOption) (*ListExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExchangeResponse)
	err := c.cc.Invoke(ctx, ExchangeService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServiceServer is the server API for ExchangeService service.
// All implementations must embed UnimplementedExchangeServiceServer
// for forward compatibility.
type ExchangeServiceServer interface {
	Create(context.Context, *CreateExchangeRequest) (*CreateExchangeResponse, error)
	Get(context.Context, *GetExchangeRequest) (*GetExchangeResponse, error)
	Update(context.Context, *UpdateExchangeRequest) (*UpdateExchangeResponse, error)
	Delete(context.Context, *DeleteExchangeRequest) (*DeleteExchangeResponse, error)
	List(context.Context, *ListExchangeRequest) (*ListExchangeResponse, error)
	mustEmbedUnimplementedExchangeServiceServer()
}

// UnimplementedExchangeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExchangeServiceServer struct{}

func (UnimplementedExchangeServiceServer) Create(context.Context, *CreateExchangeRequest) (*CreateExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedExchangeServiceServer) Get(context.Context, *GetExchangeRequest) (*GetExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedExchangeServiceServer) Update(context.Context, *UpdateExchangeRequest) (*UpdateExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedExchangeServiceServer) Delete(context.Context, *DeleteExchangeRequest) (*DeleteExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExchangeServiceServer) List(context.Context, *ListExchangeRequest) (*ListExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedExchangeServiceServer) mustEmbedUnimplementedExchangeServiceServer() {}
func (UnimplementedExchangeServiceServer) testEmbeddedByValue()                         {}

// UnsafeExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServiceServer will
// result in compilation errors.
type UnsafeExchangeServiceServer interface {
	mustEmbedUnimplementedExchangeServiceServer()
}

func RegisterExchangeServiceServer(s grpc.ServiceRegistrar, srv ExchangeServiceServer) {
	// If the following call pancis, it indicates UnimplementedExchangeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExchangeService_ServiceDesc, srv)
}

func _ExchangeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).Create(ctx, req.(*CreateExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).Get(ctx, req.(*GetExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).Update(ctx, req.(*UpdateExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).Delete(ctx, req.(*DeleteExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).List(ctx, req.(*ListExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeService_ServiceDesc is the grpc.ServiceDesc for ExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange_proto.ExchangeService",
	HandlerType: (*ExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ExchangeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ExchangeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ExchangeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ExchangeService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ExchangeService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction-service/protos/exchange.proto",
}
