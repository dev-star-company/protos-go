// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: transaction-service/protos/proof.proto

package proof_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProofService_Create_FullMethodName = "/proof_proto.ProofService/Create"
	ProofService_Get_FullMethodName    = "/proof_proto.ProofService/Get"
	ProofService_Update_FullMethodName = "/proof_proto.ProofService/Update"
	ProofService_Delete_FullMethodName = "/proof_proto.ProofService/Delete"
	ProofService_List_FullMethodName   = "/proof_proto.ProofService/List"
)

// ProofServiceClient is the client API for ProofService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProofServiceClient interface {
	Create(ctx context.Context, in *CreateProofRequest, opts ...grpc.CallOption) (*CreateProofResponse, error)
	Get(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error)
	Update(ctx context.Context, in *UpdateProofRequest, opts ...grpc.CallOption) (*UpdateProofResponse, error)
	Delete(ctx context.Context, in *DeleteProofRequest, opts ...grpc.CallOption) (*DeleteProofResponse, error)
	List(ctx context.Context, in *ListProofRequest, opts ...grpc.CallOption) (*ListProofResponse, error)
}

type proofServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProofServiceClient(cc grpc.ClientConnInterface) ProofServiceClient {
	return &proofServiceClient{cc}
}

func (c *proofServiceClient) Create(ctx context.Context, in *CreateProofRequest, opts ...grpc.CallOption) (*CreateProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProofResponse)
	err := c.cc.Invoke(ctx, ProofService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proofServiceClient) Get(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProofResponse)
	err := c.cc.Invoke(ctx, ProofService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proofServiceClient) Update(ctx context.Context, in *UpdateProofRequest, opts ...grpc.CallOption) (*UpdateProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProofResponse)
	err := c.cc.Invoke(ctx, ProofService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proofServiceClient) Delete(ctx context.Context, in *DeleteProofRequest, opts ...grpc.CallOption) (*DeleteProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProofResponse)
	err := c.cc.Invoke(ctx, ProofService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proofServiceClient) List(ctx context.Context, in *ListProofRequest, opts ...grpc.CallOption) (*ListProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProofResponse)
	err := c.cc.Invoke(ctx, ProofService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProofServiceServer is the server API for ProofService service.
// All implementations must embed UnimplementedProofServiceServer
// for forward compatibility.
type ProofServiceServer interface {
	Create(context.Context, *CreateProofRequest) (*CreateProofResponse, error)
	Get(context.Context, *GetProofRequest) (*GetProofResponse, error)
	Update(context.Context, *UpdateProofRequest) (*UpdateProofResponse, error)
	Delete(context.Context, *DeleteProofRequest) (*DeleteProofResponse, error)
	List(context.Context, *ListProofRequest) (*ListProofResponse, error)
	mustEmbedUnimplementedProofServiceServer()
}

// UnimplementedProofServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProofServiceServer struct{}

func (UnimplementedProofServiceServer) Create(context.Context, *CreateProofRequest) (*CreateProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProofServiceServer) Get(context.Context, *GetProofRequest) (*GetProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProofServiceServer) Update(context.Context, *UpdateProofRequest) (*UpdateProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProofServiceServer) Delete(context.Context, *DeleteProofRequest) (*DeleteProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProofServiceServer) List(context.Context, *ListProofRequest) (*ListProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProofServiceServer) mustEmbedUnimplementedProofServiceServer() {}
func (UnimplementedProofServiceServer) testEmbeddedByValue()                      {}

// UnsafeProofServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProofServiceServer will
// result in compilation errors.
type UnsafeProofServiceServer interface {
	mustEmbedUnimplementedProofServiceServer()
}

func RegisterProofServiceServer(s grpc.ServiceRegistrar, srv ProofServiceServer) {
	// If the following call pancis, it indicates UnimplementedProofServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProofService_ServiceDesc, srv)
}

func _ProofService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProofServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProofService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProofServiceServer).Create(ctx, req.(*CreateProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProofService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProofServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProofService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProofServiceServer).Get(ctx, req.(*GetProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProofService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProofServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProofService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProofServiceServer).Update(ctx, req.(*UpdateProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProofService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProofServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProofService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProofServiceServer).Delete(ctx, req.(*DeleteProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProofService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProofServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProofService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProofServiceServer).List(ctx, req.(*ListProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProofService_ServiceDesc is the grpc.ServiceDesc for ProofService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProofService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proof_proto.ProofService",
	HandlerType: (*ProofServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProofService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProofService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProofService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProofService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProofService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction-service/protos/proof.proto",
}
