// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: transaction-service/protos/account_type.proto

package account_type_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountTypeService_Create_FullMethodName = "/account_type_proto.AccountTypeService/Create"
	AccountTypeService_Get_FullMethodName    = "/account_type_proto.AccountTypeService/Get"
	AccountTypeService_List_FullMethodName   = "/account_type_proto.AccountTypeService/List"
	AccountTypeService_Update_FullMethodName = "/account_type_proto.AccountTypeService/Update"
	AccountTypeService_Delete_FullMethodName = "/account_type_proto.AccountTypeService/Delete"
)

// AccountTypeServiceClient is the client API for AccountTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountTypeServiceClient interface {
	Create(ctx context.Context, in *CreateAccountTypeRequest, opts ...grpc.CallOption) (*CreateAccountTypeResponse, error)
	Get(ctx context.Context, in *GetAccountTypeRequest, opts ...grpc.CallOption) (*GetAccountTypeResponse, error)
	List(ctx context.Context, in *ListAccountTypeRequest, opts ...grpc.CallOption) (*ListAccountTypeResponse, error)
	Update(ctx context.Context, in *UpdateAccountTypeRequest, opts ...grpc.CallOption) (*UpdateAccountTypeResponse, error)
	Delete(ctx context.Context, in *DeleteAccountTypeRequest, opts ...grpc.CallOption) (*DeleteAccountTypeResponse, error)
}

type accountTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountTypeServiceClient(cc grpc.ClientConnInterface) AccountTypeServiceClient {
	return &accountTypeServiceClient{cc}
}

func (c *accountTypeServiceClient) Create(ctx context.Context, in *CreateAccountTypeRequest, opts ...grpc.CallOption) (*CreateAccountTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountTypeResponse)
	err := c.cc.Invoke(ctx, AccountTypeService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountTypeServiceClient) Get(ctx context.Context, in *GetAccountTypeRequest, opts ...grpc.CallOption) (*GetAccountTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountTypeResponse)
	err := c.cc.Invoke(ctx, AccountTypeService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountTypeServiceClient) List(ctx context.Context, in *ListAccountTypeRequest, opts ...grpc.CallOption) (*ListAccountTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountTypeResponse)
	err := c.cc.Invoke(ctx, AccountTypeService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountTypeServiceClient) Update(ctx context.Context, in *UpdateAccountTypeRequest, opts ...grpc.CallOption) (*UpdateAccountTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountTypeResponse)
	err := c.cc.Invoke(ctx, AccountTypeService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountTypeServiceClient) Delete(ctx context.Context, in *DeleteAccountTypeRequest, opts ...grpc.CallOption) (*DeleteAccountTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountTypeResponse)
	err := c.cc.Invoke(ctx, AccountTypeService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountTypeServiceServer is the server API for AccountTypeService service.
// All implementations must embed UnimplementedAccountTypeServiceServer
// for forward compatibility.
type AccountTypeServiceServer interface {
	Create(context.Context, *CreateAccountTypeRequest) (*CreateAccountTypeResponse, error)
	Get(context.Context, *GetAccountTypeRequest) (*GetAccountTypeResponse, error)
	List(context.Context, *ListAccountTypeRequest) (*ListAccountTypeResponse, error)
	Update(context.Context, *UpdateAccountTypeRequest) (*UpdateAccountTypeResponse, error)
	Delete(context.Context, *DeleteAccountTypeRequest) (*DeleteAccountTypeResponse, error)
	mustEmbedUnimplementedAccountTypeServiceServer()
}

// UnimplementedAccountTypeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountTypeServiceServer struct{}

func (UnimplementedAccountTypeServiceServer) Create(context.Context, *CreateAccountTypeRequest) (*CreateAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountTypeServiceServer) Get(context.Context, *GetAccountTypeRequest) (*GetAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAccountTypeServiceServer) List(context.Context, *ListAccountTypeRequest) (*ListAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccountTypeServiceServer) Update(context.Context, *UpdateAccountTypeRequest) (*UpdateAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccountTypeServiceServer) Delete(context.Context, *DeleteAccountTypeRequest) (*DeleteAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountTypeServiceServer) mustEmbedUnimplementedAccountTypeServiceServer() {}
func (UnimplementedAccountTypeServiceServer) testEmbeddedByValue()                            {}

// UnsafeAccountTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountTypeServiceServer will
// result in compilation errors.
type UnsafeAccountTypeServiceServer interface {
	mustEmbedUnimplementedAccountTypeServiceServer()
}

func RegisterAccountTypeServiceServer(s grpc.ServiceRegistrar, srv AccountTypeServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountTypeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountTypeService_ServiceDesc, srv)
}

func _AccountTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountTypeServiceServer).Create(ctx, req.(*CreateAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountTypeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountTypeServiceServer).Get(ctx, req.(*GetAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountTypeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountTypeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountTypeService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountTypeServiceServer).List(ctx, req.(*ListAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountTypeServiceServer).Update(ctx, req.(*UpdateAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountTypeServiceServer).Delete(ctx, req.(*DeleteAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountTypeService_ServiceDesc is the grpc.ServiceDesc for AccountTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account_type_proto.AccountTypeService",
	HandlerType: (*AccountTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccountTypeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccountTypeService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccountTypeService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccountTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction-service/protos/account_type.proto",
}
